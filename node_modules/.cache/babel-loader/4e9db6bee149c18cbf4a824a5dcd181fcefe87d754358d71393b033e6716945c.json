{"ast":null,"code":"var _jsxFileName = \"/Users/Takeshi/workspace/Git_Projects/Aizu_Muzin/src/components/Dapp.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n//Import React Containers\nimport { ethers } from \"ethers\";\n\n//import Contracts json\nimport TokenABI from \"../contracts/AizuMujinToken.json\";\nimport AMujinABI from \"../contracts/AizuMujin.json\";\n\n//import My Components\nimport DepositToken from \"./DepositToken\";\nimport BalanceOf from \"./BalanceOf\";\nimport FoundToken from \"./FoundToken\";\n\n//AizuMujinToken Contract Address to be used ABI and create token instance.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet TAddress = \"0xf8C0f8499147ac28387d2d6394E3bD94D1Bb061e\";\n//AizuMujin Contract Address to be used ABI.\nlet AMujinAddress = \"0x07CDBed21422e7B7B258a80B07CA813Bcf4D7e5A\";\n\n//Those structure get the information contract and checkCode\n//e.g.) tokencontract = {contract: given contract, checkCode: Error code}\n//[FUTURE]checkCode would be not needed, because allmost all cases getting contract will work.\nlet tokenContract = {\n  contract: null,\n  checkCode: \"TOKEN CONTRACT\"\n};\nlet aizuMujinContract = {\n  contract: null,\n  checkCode: \"AIZU MUJIN CONTRACT\"\n};\n\n//variables\nlet currentAccount; //user wallet address.\nlet provider = null; //Like Metamask.\nlet signer = null; //the signature from currentAccount, used to interact with Blockchain.\nlet balance = 0; //temp variables to get blance of Token from address.\nexport default function Dapp() {\n  _s();\n  const [toggle, setToggle] = useState(false); //for send button \n  const [toggle2, setToggle2] = useState(false); //for All Token send button \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u4F1A\\u6D25\\u7121\\u5C3D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), \"\\u4F1A\\u6D25\\u7121\\u5C3D\\u3078\\u3088\\u3046\\u3053\\u305D\\u3002\\u3053\\u306E\\u30B5\\u30A4\\u30C8\\u306F\\u73FE\\u5728\\u958B\\u767A\\u30C6\\u30B9\\u30C8\\u6BB5\\u968E\\u3067\\u3059\\u3002\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 37\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"connectBtn\",\n      onClick: _connectionProcedure,\n      children: \"\\u30A6\\u30A9\\u30EC\\u30C3\\u30C8\\u306B\\u63A5\\u7D9A\\u3059\\u308B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(DepositToken, {\n      _sendTokenToAizuMujin: () => {\n        _sendTokenToAizuMujin(setToggle);\n      },\n      toggle: toggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(BalanceOf, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FoundToken, {\n      _transferAllToken: () => {\n        _transferAllToken(setToggle2);\n      },\n      toggle2: toggle2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u4F1A\\u6D25\\u7121\\u5C3D\\u3078\\u53C2\\u52A0\\u3059\\u308B\\u306B\\u306F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u4F1A\\u6D25\\u7121\\u5C3D\\u3078\\u3088\\u3046\\u3053\\u305D\\u3002\\u3053\\u306E\\u30B5\\u30A4\\u30C8\\u306F\\u73FE\\u5728\\u958B\\u767A\\u30C6\\u30B9\\u30C8\\u6BB5\\u968E\\u3067\\u3059\\u3002\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 37\n        }, this), \"\\u5B9F\\u969B\\u306B\\u3054\\u5229\\u7528\\u306B\\u306A\\u308A\\u305F\\u3044\\u65B9\\u306F\\u201DMetamask\\u201D\\u3068\\u3044\\u3046\\u30A2\\u30D7\\u30EA\\u30B1\\u30FC\\u30B7\\u30E7\\u30F3\\u3092\\u5165\\u308C\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 52\n        }, this), \"\\u305D\\u3053\\u3067\\u3001\\u65B0\\u305F\\u306A\\u3042\\u306A\\u305F\\u306E\\u30A6\\u30A9\\u30EC\\u30C3\\u30C8\\u3092\\u4F5C\\u308A\\u307E\\u3057\\u3087\\u3046\\uFF01\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 33\n        }, this), \"\\u5B9F\\u969B\\u306BAM_TOKEN\\u3092\\u624B\\u306B\\u5165\\u308C\\u308B\\u306B\\u306F\\u7BA1\\u7406\\u8005\\u3078\\u306E\\u554F\\u3044\\u5408\\u308F\\u305B\\u304C\\u5FC5\\u8981\\u3067\\u3059\\u3002\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 44\n        }, this), \"\\u4E0B\\u8A18\\u306B\\u3054\\u9023\\u7D61\\u304F\\u3060\\u3055\\u3044\\u3002\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), \"test@test.com\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Dapp, \"77poZL850fcXn0nID9X90T8xWAc=\");\n_c = Dapp;\nasync function _connectionProcedure() {\n  try {\n    await _connectWallet();\n    activateFunc(false); //Connecting button disabled\n    await _makeSigner(); //current account signature\n    await _getAccount(); //current account address\n    await _makeContract(TAddress, TokenABI.abi, tokenContract); // Token Contract Instance\n    await _makeContract(AMujinAddress, AMujinABI.abi, aizuMujinContract); // AizuMujin Contract Instance\n    await _getBalanceOf(currentAccount, \"myTotalToken\"); //get balance from MY wallet\n    await _getBalanceOf(AMujinAddress, \"AizuMujinTotalToken\"); // get balance from AIZUMUJIN contract\n  } catch (error) {\n    //activateFunc(true);//Connecting button disabled\n  }\n}\nasync function _connectWallet() {\n  //check whether Metamask is installed\n  if (window.ethereum === undefined) {\n    console.log(\"ERROR: MetaMask not installed; using read-only defaults\");\n  } else {\n    console.log(\"OK: Metamask exists.\");\n    // get Metamask Provider\n    provider = new ethers.providers.Web3Provider(window.ethereum);\n    try {\n      await provider.send(\"eth_requestAccounts\", []);\n    } catch (error) {\n      alert(\"Connecting canceled or Error occured\");\n    }\n    console.log(provider);\n  }\n}\n//to trnsact to blockchain, if you want to know about siner, please go to the Official Documentation\nasync function _makeSigner() {\n  signer = await provider.getSigner();\n  console.log(\"Signer: \" + signer);\n}\n\n//e.g.) _makeContract(the address of which you wan to get functions,\n//                    the abi related to the address,\n//                    the provider you use or where the contract is in\n//                  );\nfunction _makeContract(_address, _abi, obj) {\n  obj.contract = new ethers.Contract(_address, _abi, provider);\n  console.log(obj.checkCode + \": \" + obj.contract.symbol());\n}\n\n//To get the balance of AMT\n//e.g.) _getBalanceOf(address which has AMT, the HTML ID which you want to insert the result into)\nasync function _getBalanceOf(_address, _elementId) {\n  const balanceHex = await tokenContract.contract.balanceOf(_address); //get balance as hexidecimal\n  balance = ethers.BigNumber.from(balanceHex).toNumber(); //to decimal\n  console.log(ethers.BigNumber.from(balance).toNumber());\n  document.getElementById(_elementId).innerHTML = balance;\n}\nasync function _sendTokenToAizuMujin(setToggle) {\n  let amount = document.getElementById(\"transactionInpt\").value;\n  if (!isNaN(amount)) {\n    try {\n      let transaction = await tokenContract.contract.connect(signer).transfer(AMujinAddress, Number(amount));\n      setToggle(true); //send button disabled\n      await transaction.wait();\n      setToggle(false); // send button disabled\n      //activateSendTokenFunctions(true);\n      await _getBalanceOf(currentAccount, \"myTotalToken\"); //get balance from MY wallet\n      await _getBalanceOf(AMujinAddress, \"AizuMujinTotalToken\"); // get balance from AIZUMUJIN contract\n    } catch (error) {\n      alert(\"ERROR: Canceled or Failed\");\n    }\n  } else {\n    alert(\"ERROR: Failed to pay.\");\n  }\n}\nasync function _getAccount() {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  }).catch(err => {\n    if (err.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      // If this happens, the user rejected the connection request.\n      console.log('Please connect to MetaMask.');\n    } else {\n      console.error(err);\n    }\n  });\n  currentAccount = accounts[0];\n  console.log(\"ACCOUNT: \" + currentAccount);\n}\n\n//After the connection to this page, connectBtn must be inactivated.\nfunction activateFunc(_activate) {\n  if (provider != null && _activate === false) {\n    document.getElementById('connectBtn').innerHTML = \"ウォレット接続済み\";\n    document.getElementById('connectBtn').setAttribute(\"disabled\", true);\n  } else if (_activate === true) {\n    document.getElementById('connectBtn').innerHTML = \"ウォレットに接続する\";\n    document.getElementById('connectBtn').setAttribute(\"disabled\", false);\n  }\n}\n\n//Aizumujin Contract function\n//send all token into the person of the address in input box\nasync function _transferAllToken(setToggle2) {\n  //get Address from html form\n  const _toAddress = document.getElementById(\"aizuMujinInpt\").value;\n  console.log(_toAddress);\n  if (!isNaN(_toAddress)) {\n    //when the inputbox has a value to get\n    try {\n      let transaction = await aizuMujinContract.contract.connect(signer).sendAllTokens(_toAddress);\n      setToggle2(true);\n      await transaction.wait();\n      setToggle2(false);\n    } catch (error) {\n      alert(\"ERROR: Canceled or Failed\");\n    }\n  } else {\n    //when the inputbox is Nothing to get\n    alert(\"ERROR: Failed to pay.\");\n  }\n  await _connectWallet();\n  await _makeSigner(); //current account signature\n  await _getAccount(); //current account address\n  await _makeContract(TAddress, TokenABI.abi, tokenContract); // Token Contract Instance\n  await _makeContract(AMujinAddress, AMujinABI.abi, aizuMujinContract); // AizuMujin Contract Instance\n  await _getBalanceOf(currentAccount, \"myTotalToken\"); //get balance from MY wallet\n  await _getBalanceOf(AMujinAddress, \"AizuMujinTotalToken\"); // get balance from AIZUMUJIN contract\n}\nvar _c;\n$RefreshReg$(_c, \"Dapp\");","map":{"version":3,"names":["useState","ethers","TokenABI","AMujinABI","DepositToken","BalanceOf","FoundToken","jsxDEV","_jsxDEV","Fragment","_Fragment","TAddress","AMujinAddress","tokenContract","contract","checkCode","aizuMujinContract","currentAccount","provider","signer","balance","Dapp","_s","toggle","setToggle","toggle2","setToggle2","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_connectionProcedure","_sendTokenToAizuMujin","_transferAllToken","_c","_connectWallet","activateFunc","_makeSigner","_getAccount","_makeContract","abi","_getBalanceOf","error","window","ethereum","undefined","console","log","providers","Web3Provider","send","alert","getSigner","_address","_abi","obj","Contract","symbol","_elementId","balanceHex","balanceOf","BigNumber","from","toNumber","document","getElementById","innerHTML","amount","value","isNaN","transaction","connect","transfer","Number","wait","accounts","request","method","catch","err","code","_activate","setAttribute","_toAddress","sendAllTokens","$RefreshReg$"],"sources":["/Users/Takeshi/workspace/Git_Projects/Aizu_Muzin/src/components/Dapp.js"],"sourcesContent":["import {useState} from 'react';\n//Import React Containers\nimport { ethers } from \"ethers\";\n\n//import Contracts json\nimport TokenABI from \"../contracts/AizuMujinToken.json\";\nimport AMujinABI from \"../contracts/AizuMujin.json\";\n\n//import My Components\nimport DepositToken from \"./DepositToken\";\nimport BalanceOf from \"./BalanceOf\";\nimport FoundToken from \"./FoundToken\";\n\n//AizuMujinToken Contract Address to be used ABI and create token instance.\nlet TAddress = \"0xf8C0f8499147ac28387d2d6394E3bD94D1Bb061e\";\n//AizuMujin Contract Address to be used ABI.\nlet AMujinAddress = \"0x07CDBed21422e7B7B258a80B07CA813Bcf4D7e5A\";\n\n//Those structure get the information contract and checkCode\n//e.g.) tokencontract = {contract: given contract, checkCode: Error code}\n//[FUTURE]checkCode would be not needed, because allmost all cases getting contract will work.\nlet tokenContract = {contract:null,checkCode:\"TOKEN CONTRACT\"};\nlet aizuMujinContract ={contract:null,checkCode:\"AIZU MUJIN CONTRACT\"};\n\n//variables\nlet currentAccount; //user wallet address.\nlet provider = null; //Like Metamask.\nlet signer = null;  //the signature from currentAccount, used to interact with Blockchain.\nlet balance = 0; //temp variables to get blance of Token from address.\nexport default function Dapp() {\n    const [toggle,setToggle] = useState(false);//for send button \n    const [toggle2,setToggle2] = useState(false);//for All Token send button \n    return (\n        <>\n        <h1>会津無尽</h1>\n        <br />\n        会津無尽へようこそ。このサイトは現在開発テスト段階です。<br />\n        <br /><br />\n\n        <button id=\"connectBtn\" onClick={_connectionProcedure}>ウォレットに接続する</button>\n\n        <br/><br/><br/><br/>\n        <DepositToken _sendTokenToAizuMujin={()=>{_sendTokenToAizuMujin(setToggle)}} toggle={toggle} />\n\n        <BalanceOf />\n\n        <FoundToken _transferAllToken={()=>{_transferAllToken(setToggle2)}} toggle2={toggle2} />\n        <br />\n        <div>\n        <br />\n        <h2>会津無尽へ参加するには</h2>\n        <p>\n        会津無尽へようこそ。このサイトは現在開発テスト段階です。<br />\n        実際にご利用になりたい方は”Metamask”というアプリケーションを入れてください。<br />\n        そこで、新たなあなたのウォレットを作りましょう！<br />\n        実際にAM_TOKENを手に入れるには管理者への問い合わせが必要です。<br />\n        下記にご連絡ください。<br />\n        <br />\n        test@test.com<br />\n        </p>\n        <br />\n        </div>\n        </>\n        );\n    }\n\n    async function _connectionProcedure()\n    {\n        try{\n            await _connectWallet();\n            activateFunc(false);//Connecting button disabled\n            await _makeSigner();//current account signature\n            await _getAccount();//current account address\n            await _makeContract(TAddress,TokenABI.abi,tokenContract);// Token Contract Instance\n            await _makeContract(AMujinAddress,AMujinABI.abi,aizuMujinContract);// AizuMujin Contract Instance\n            await _getBalanceOf(currentAccount,\"myTotalToken\"); //get balance from MY wallet\n            await _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");// get balance from AIZUMUJIN contract\n        }catch(error){\n            //activateFunc(true);//Connecting button disabled\n        }\n    }\n\n    async function _connectWallet()\n    {\n        //check whether Metamask is installed\n        if (window.ethereum === undefined) {\n            console.log(\"ERROR: MetaMask not installed; using read-only defaults\");\n        } else {\n            console.log(\"OK: Metamask exists.\");\n            // get Metamask Provider\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            try{\n                await provider.send(\"eth_requestAccounts\", []);\n            }catch(error){\n                alert(\"Connecting canceled or Error occured\")\n            }\n            console.log(provider);\n        }\n    }\n    //to trnsact to blockchain, if you want to know about siner, please go to the Official Documentation\n    async function _makeSigner()\n    {\n        signer = await provider.getSigner();\n        console.log(\"Signer: \" + signer);\n    }\n\n    //e.g.) _makeContract(the address of which you wan to get functions,\n    //                    the abi related to the address,\n    //                    the provider you use or where the contract is in\n    //                  );\n    function _makeContract(_address,_abi,obj)\n    {\n        obj.contract = new ethers.Contract(_address, _abi, provider);\n        console.log(obj.checkCode + \": \" +obj.contract.symbol());\n    }\n\n    //To get the balance of AMT\n    //e.g.) _getBalanceOf(address which has AMT, the HTML ID which you want to insert the result into)\n    async function _getBalanceOf(_address,_elementId){\n        const balanceHex = await tokenContract.contract.balanceOf(_address); //get balance as hexidecimal\n        balance = ethers.BigNumber.from(balanceHex).toNumber();//to decimal\n        console.log(ethers.BigNumber.from(balance).toNumber());\n        document.getElementById(_elementId).innerHTML = balance;\n    }\n\n\n    async function _sendTokenToAizuMujin(setToggle){\n        let amount = document.getElementById(\"transactionInpt\").value;\n        if(!isNaN(amount)){\n            try{\n                let transaction = await tokenContract.contract.connect(signer).transfer(AMujinAddress,Number(amount));\n                setToggle(true);//send button disabled\n                await transaction.wait();\n                setToggle(false);// send button disabled\n                //activateSendTokenFunctions(true);\n                await _getBalanceOf(currentAccount,\"myTotalToken\"); //get balance from MY wallet\n                await _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");// get balance from AIZUMUJIN contract\n            }catch(error){\n                alert(\"ERROR: Canceled or Failed\");\n            }\n        }else{\n            alert(\"ERROR: Failed to pay.\");\n        }\n\n    }\n\n    async function _getAccount() {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n        .catch((err) => {\n            if (err.code === 4001) {\n                // EIP-1193 userRejectedRequest error\n                // If this happens, the user rejected the connection request.\n                console.log('Please connect to MetaMask.');\n            } else {\n                console.error(err);\n            }\n        });\n        currentAccount = accounts[0];\n        console.log(\"ACCOUNT: \" + currentAccount);\n    }\n\n    //After the connection to this page, connectBtn must be inactivated.\n    function activateFunc(_activate)\n    {\n        if(provider != null && _activate===false)\n        {\n            document.getElementById('connectBtn').innerHTML =\"ウォレット接続済み\";\n            document.getElementById('connectBtn').setAttribute(\"disabled\", true);\n        }else if(_activate===true){\n            document.getElementById('connectBtn').innerHTML =\"ウォレットに接続する\";\n            document.getElementById('connectBtn').setAttribute(\"disabled\", false);\n        }\n    }\n\n    //Aizumujin Contract function\n    //send all token into the person of the address in input box\n    async function _transferAllToken(setToggle2)\n    {\n        //get Address from html form\n        const _toAddress = document.getElementById(\"aizuMujinInpt\").value;\n        console.log(_toAddress);\n        if(!isNaN(_toAddress)){\n            //when the inputbox has a value to get\n            try{\n                let transaction = await aizuMujinContract.contract.connect(signer).sendAllTokens(_toAddress);\n                setToggle2(true);\n                await transaction.wait();\n                setToggle2(false);\n            }catch(error){\n                alert(\"ERROR: Canceled or Failed\");\n            }\n        }else{\n            //when the inputbox is Nothing to get\n            alert(\"ERROR: Failed to pay.\");\n        }\n        await _connectWallet();\n        await _makeSigner();//current account signature\n        await _getAccount();//current account address\n        await _makeContract(TAddress,TokenABI.abi,tokenContract);// Token Contract Instance\n        await _makeContract(AMujinAddress,AMujinABI.abi,aizuMujinContract);// AizuMujin Contract Instance\n        await _getBalanceOf(currentAccount,\"myTotalToken\"); //get balance from MY wallet\n        await _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");// get balance from AIZUMUJIN contract\n    }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}