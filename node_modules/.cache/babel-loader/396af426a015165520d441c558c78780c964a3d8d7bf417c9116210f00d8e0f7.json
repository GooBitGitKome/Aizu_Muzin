{"ast":null,"code":"import _regeneratorRuntime from\"/Users/Bushi/workplace/GitHub/Aizu_Muzin/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/Bushi/workplace/GitHub/Aizu_Muzin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/Bushi/workplace/GitHub/Aizu_Muzin/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';//Import React Containers\nimport{ethers}from\"ethers\";//import Contracts json\nimport TokenABI from\"../contracts/AizuMujinToken.json\";import AMujinABI from\"../contracts/AizuMujin.json\";//import My Components\nimport DepositToken from\"./DepositToken\";import BalanceOf from\"./BalanceOf\";import FoundToken from\"./FoundToken\";//AizuMujinToken Contract Address to be used ABI and create token instance.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var TAddress=\"0xf8C0f8499147ac28387d2d6394E3bD94D1Bb061e\";//AizuMujin Contract Address to be used ABI.\nvar AMujinAddress=\"0x07CDBed21422e7B7B258a80B07CA813Bcf4D7e5A\";//Those structure get the information contract and checkCode\n//e.g.) tokencontract = {contract: given contract, checkCode: Error code}\n//[FUTURE]checkCode would be not needed, because allmost all cases getting contract will work.\nvar tokenContract={contract:null,checkCode:\"TOKEN CONTRACT\"};var aizuMujinContract={contract:null,checkCode:\"AIZU MUJIN CONTRACT\"};//variables\nvar currentAccount;//user wallet address.\nvar provider=null;//Like Metamask.\nvar signer=null;//the signature from currentAccount, used to interact with Blockchain.\nvar balance=0;//temp variables to get blance of Token from address.\nexport default function Dapp(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),toggle=_useState2[0],setToggle=_useState2[1];//for send button \nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),toggle2=_useState4[0],setToggle2=_useState4[1];//for All Token send button \nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u4F1A\\u6D25\\u7121\\u5C3D\"}),/*#__PURE__*/_jsx(\"br\",{}),\"\\u4F1A\\u6D25\\u7121\\u5C3D\\u3078\\u3088\\u3046\\u3053\\u305D\\u3002\\u3053\\u306E\\u30B5\\u30A4\\u30C8\\u306F\\u73FE\\u5728\\u958B\\u767A\\u30C6\\u30B9\\u30C8\\u6BB5\\u968E\\u3067\\u3059\\u3002\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"connectBtn\",onClick:_connectionProcedure,children:\"\\u30A6\\u30A9\\u30EC\\u30C3\\u30C8\\u306B\\u63A5\\u7D9A\\u3059\\u308B\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(DepositToken,{_sendTokenToAizuMujin:function _sendTokenToAizuMujin(){_sendTokenToAizuMujin2(setToggle);},toggle:toggle}),/*#__PURE__*/_jsx(BalanceOf,{}),/*#__PURE__*/_jsx(FoundToken,{_transferAllToken:function _transferAllToken(){_transferAllToken2(setToggle2);},toggle2:toggle2}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h2\",{children:\"\\u4F1A\\u6D25\\u7121\\u5C3D\\u3078\\u53C2\\u52A0\\u3059\\u308B\\u306B\\u306F\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u4F1A\\u6D25\\u7121\\u5C3D\\u3078\\u3088\\u3046\\u3053\\u305D\\u3002\\u3053\\u306E\\u30B5\\u30A4\\u30C8\\u306F\\u73FE\\u5728\\u958B\\u767A\\u30C6\\u30B9\\u30C8\\u6BB5\\u968E\\u3067\\u3059\\u3002\",/*#__PURE__*/_jsx(\"br\",{}),\"\\u5B9F\\u969B\\u306B\\u3054\\u5229\\u7528\\u306B\\u306A\\u308A\\u305F\\u3044\\u65B9\\u306F\\u201DMetamask\\u201D\\u3068\\u3044\\u3046\\u30A2\\u30D7\\u30EA\\u30B1\\u30FC\\u30B7\\u30E7\\u30F3\\u3092\\u5165\\u308C\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\",/*#__PURE__*/_jsx(\"br\",{}),\"\\u305D\\u3053\\u3067\\u3001\\u65B0\\u305F\\u306A\\u3042\\u306A\\u305F\\u306E\\u30A6\\u30A9\\u30EC\\u30C3\\u30C8\\u3092\\u4F5C\\u308A\\u307E\\u3057\\u3087\\u3046\\uFF01\",/*#__PURE__*/_jsx(\"br\",{}),\"\\u5B9F\\u969B\\u306BAM_TOKEN\\u3092\\u624B\\u306B\\u5165\\u308C\\u308B\\u306B\\u306F\\u7BA1\\u7406\\u8005\\u3078\\u306E\\u554F\\u3044\\u5408\\u308F\\u305B\\u304C\\u5FC5\\u8981\\u3067\\u3059\\u3002\",/*#__PURE__*/_jsx(\"br\",{}),\"\\u4E0B\\u8A18\\u306B\\u3054\\u9023\\u7D61\\u304F\\u3060\\u3055\\u3044\\u3002\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"test@test.com\",/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsx(\"br\",{})]})]});}function _connectionProcedure(){return _connectionProcedure2.apply(this,arguments);}function _connectionProcedure2(){_connectionProcedure2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _connectWallet();case 3:activateFunc(false);//Connecting button disabled\n_context.next=6;return _makeSigner();case 6:_context.next=8;return _getAccount();case 8:_context.next=10;return _makeContract(TAddress,TokenABI.abi,tokenContract);case 10:_context.next=12;return _makeContract(AMujinAddress,AMujinABI.abi,aizuMujinContract);case 12:_context.next=14;return _getBalanceOf(currentAccount,\"myTotalToken\");case 14:_context.next=16;return _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");case 16:_context.next=20;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](0);case 20:case\"end\":return _context.stop();}},_callee,null,[[0,18]]);}));return _connectionProcedure2.apply(this,arguments);}function _connectWallet(){return _connectWallet2.apply(this,arguments);}//to trnsact to blockchain, if you want to know about siner, please go to the Official Documentation\nfunction _connectWallet2(){_connectWallet2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:if(!(window.ethereum===undefined)){_context2.next=4;break;}console.log(\"ERROR: MetaMask not installed; using read-only defaults\");_context2.next=15;break;case 4:console.log(\"OK: Metamask exists.\");// get Metamask Provider\nprovider=new ethers.providers.Web3Provider(window.ethereum);_context2.prev=6;_context2.next=9;return provider.send(\"eth_requestAccounts\",[]);case 9:_context2.next=14;break;case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](6);alert(\"Connecting canceled or Error occured\");case 14:console.log(provider);case 15:case\"end\":return _context2.stop();}},_callee2,null,[[6,11]]);}));return _connectWallet2.apply(this,arguments);}function _makeSigner(){return _makeSigner2.apply(this,arguments);}//e.g.) _makeContract(the address of which you wan to get functions,\n//                    the abi related to the address,\n//                    the provider you use or where the contract is in\n//                  );\nfunction _makeSigner2(){_makeSigner2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.next=2;return provider.getSigner();case 2:signer=_context3.sent;console.log(\"Signer: \"+signer);case 4:case\"end\":return _context3.stop();}},_callee3);}));return _makeSigner2.apply(this,arguments);}function _makeContract(_address,_abi,obj){obj.contract=new ethers.Contract(_address,_abi,provider);console.log(obj.checkCode+\": \"+obj.contract.symbol());}//To get the balance of AMT\n//e.g.) _getBalanceOf(address which has AMT, the HTML ID which you want to insert the result into)\nfunction _getBalanceOf(_x,_x2){return _getBalanceOf2.apply(this,arguments);}function _getBalanceOf2(){_getBalanceOf2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_address,_elementId){var balanceHex;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:_context4.next=2;return tokenContract.contract.balanceOf(_address);case 2:balanceHex=_context4.sent;//get balance as hexidecimal\nbalance=ethers.BigNumber.from(balanceHex).toNumber();//to decimal\nconsole.log(ethers.BigNumber.from(balance).toNumber());document.getElementById(_elementId).innerHTML=balance;case 6:case\"end\":return _context4.stop();}},_callee4);}));return _getBalanceOf2.apply(this,arguments);}function _sendTokenToAizuMujin2(_x3){return _sendTokenToAizuMujin3.apply(this,arguments);}function _sendTokenToAizuMujin3(){_sendTokenToAizuMujin3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(setToggle){var amount,transaction;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:amount=document.getElementById(\"transactionInpt\").value;if(isNaN(amount)){_context5.next=21;break;}_context5.prev=2;_context5.next=5;return tokenContract.contract.connect(signer).transfer(AMujinAddress,Number(amount));case 5:transaction=_context5.sent;setToggle(true);//send button disabled\n_context5.next=9;return transaction.wait();case 9:setToggle(false);// send button disabled\n//activateSendTokenFunctions(true);\n_context5.next=12;return _getBalanceOf(currentAccount,\"myTotalToken\");case 12:_context5.next=14;return _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");case 14:_context5.next=19;break;case 16:_context5.prev=16;_context5.t0=_context5[\"catch\"](2);alert(\"ERROR: Canceled or Failed\");case 19:_context5.next=22;break;case 21:alert(\"ERROR: Failed to pay.\");case 22:case\"end\":return _context5.stop();}},_callee5,null,[[2,16]]);}));return _sendTokenToAizuMujin3.apply(this,arguments);}function _getAccount(){return _getAccount2.apply(this,arguments);}//After the connection to this page, connectBtn must be inactivated.\nfunction _getAccount2(){_getAccount2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(){var accounts;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:_context6.next=2;return window.ethereum.request({method:'eth_requestAccounts'}).catch(function(err){if(err.code===4001){// EIP-1193 userRejectedRequest error\n// If this happens, the user rejected the connection request.\nconsole.log('Please connect to MetaMask.');}else{console.error(err);}});case 2:accounts=_context6.sent;currentAccount=accounts[0];console.log(\"ACCOUNT: \"+currentAccount);case 5:case\"end\":return _context6.stop();}},_callee6);}));return _getAccount2.apply(this,arguments);}function activateFunc(_activate){if(provider!=null&&_activate===false){document.getElementById('connectBtn').innerHTML=\"ウォレット接続済み\";document.getElementById('connectBtn').setAttribute(\"disabled\",true);}else if(_activate===true){document.getElementById('connectBtn').innerHTML=\"ウォレットに接続する\";document.getElementById('connectBtn').setAttribute(\"disabled\",false);}}//Aizumujin Contract function\n//send all token into the person of the address in input box\nfunction _transferAllToken2(_x4){return _transferAllToken3.apply(this,arguments);}function _transferAllToken3(){_transferAllToken3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(setToggle2){var _toAddress,transaction;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0://get Address from html form\n_toAddress=document.getElementById(\"aizuMujinInpt\").value;console.log(_toAddress);if(isNaN(_toAddress)){_context7.next=18;break;}_context7.prev=3;_context7.next=6;return aizuMujinContract.contract.connect(signer).sendAllTokens(_toAddress);case 6:transaction=_context7.sent;setToggle2(true);_context7.next=10;return transaction.wait();case 10:setToggle2(false);_context7.next=16;break;case 13:_context7.prev=13;_context7.t0=_context7[\"catch\"](3);alert(\"ERROR: Canceled or Failed\");case 16:_context7.next=19;break;case 18://when the inputbox is Nothing to get\nalert(\"ERROR: Failed to pay.\");case 19:_context7.next=21;return _connectWallet();case 21:_context7.next=23;return _makeSigner();case 23:_context7.next=25;return _getAccount();case 25:_context7.next=27;return _makeContract(TAddress,TokenABI.abi,tokenContract);case 27:_context7.next=29;return _makeContract(AMujinAddress,AMujinABI.abi,aizuMujinContract);case 29:_context7.next=31;return _getBalanceOf(currentAccount,\"myTotalToken\");case 31:_context7.next=33;return _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");case 33:case\"end\":return _context7.stop();}},_callee7,null,[[3,13]]);}));return _transferAllToken3.apply(this,arguments);}","map":{"version":3,"names":["useState","ethers","TokenABI","AMujinABI","DepositToken","BalanceOf","FoundToken","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TAddress","AMujinAddress","tokenContract","contract","checkCode","aizuMujinContract","currentAccount","provider","signer","balance","Dapp","_useState","_useState2","_slicedToArray","toggle","setToggle","_useState3","_useState4","toggle2","setToggle2","children","id","onClick","_connectionProcedure","_sendTokenToAizuMujin","_transferAllToken","_connectionProcedure2","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","_connectWallet","activateFunc","_makeSigner","_getAccount","_makeContract","abi","_getBalanceOf","t0","stop","_connectWallet2","_callee2","_callee2$","_context2","window","ethereum","undefined","console","log","providers","Web3Provider","send","alert","_makeSigner2","_callee3","_callee3$","_context3","getSigner","sent","_address","_abi","obj","Contract","symbol","_x","_x2","_getBalanceOf2","_callee4","_elementId","balanceHex","_callee4$","_context4","balanceOf","BigNumber","from","toNumber","document","getElementById","innerHTML","_x3","_sendTokenToAizuMujin3","_callee5","amount","transaction","_callee5$","_context5","value","isNaN","connect","transfer","Number","wait","_getAccount2","_callee6","accounts","_callee6$","_context6","request","method","catch","err","code","error","_activate","setAttribute","_x4","_transferAllToken3","_callee7","_toAddress","_callee7$","_context7","sendAllTokens"],"sources":["/Users/Bushi/workplace/GitHub/Aizu_Muzin/src/components/Dapp.js"],"sourcesContent":["import {useState} from 'react';\n//Import React Containers\nimport { ethers } from \"ethers\";\n\n//import Contracts json\nimport TokenABI from \"../contracts/AizuMujinToken.json\";\nimport AMujinABI from \"../contracts/AizuMujin.json\";\n\n//import My Components\nimport DepositToken from \"./DepositToken\";\nimport BalanceOf from \"./BalanceOf\";\nimport FoundToken from \"./FoundToken\";\n\n//AizuMujinToken Contract Address to be used ABI and create token instance.\nlet TAddress = \"0xf8C0f8499147ac28387d2d6394E3bD94D1Bb061e\";\n//AizuMujin Contract Address to be used ABI.\nlet AMujinAddress = \"0x07CDBed21422e7B7B258a80B07CA813Bcf4D7e5A\";\n\n//Those structure get the information contract and checkCode\n//e.g.) tokencontract = {contract: given contract, checkCode: Error code}\n//[FUTURE]checkCode would be not needed, because allmost all cases getting contract will work.\nlet tokenContract = {contract:null,checkCode:\"TOKEN CONTRACT\"};\nlet aizuMujinContract ={contract:null,checkCode:\"AIZU MUJIN CONTRACT\"};\n\n//variables\nlet currentAccount; //user wallet address.\nlet provider = null; //Like Metamask.\nlet signer = null;  //the signature from currentAccount, used to interact with Blockchain.\nlet balance = 0; //temp variables to get blance of Token from address.\nexport default function Dapp() {\n    const [toggle,setToggle] = useState(false);//for send button \n    const [toggle2,setToggle2] = useState(false);//for All Token send button \n    return (\n        <>\n        <h1>会津無尽</h1>\n        <br />\n        会津無尽へようこそ。このサイトは現在開発テスト段階です。<br />\n        <br /><br />\n\n        <button id=\"connectBtn\" onClick={_connectionProcedure}>ウォレットに接続する</button>\n\n        <br/><br/><br/><br/>\n        <DepositToken _sendTokenToAizuMujin={()=>{_sendTokenToAizuMujin(setToggle)}} toggle={toggle} />\n\n        <BalanceOf />\n\n        <FoundToken _transferAllToken={()=>{_transferAllToken(setToggle2)}} toggle2={toggle2} />\n        <br />\n        <div>\n        <br />\n        <h2>会津無尽へ参加するには</h2>\n        <p>\n        会津無尽へようこそ。このサイトは現在開発テスト段階です。<br />\n        実際にご利用になりたい方は”Metamask”というアプリケーションを入れてください。<br />\n        そこで、新たなあなたのウォレットを作りましょう！<br />\n        実際にAM_TOKENを手に入れるには管理者への問い合わせが必要です。<br />\n        下記にご連絡ください。<br />\n        <br />\n        test@test.com<br />\n        </p>\n        <br />\n        </div>\n        </>\n        );\n    }\n\n    async function _connectionProcedure()\n    {\n        try{\n            await _connectWallet();\n            activateFunc(false);//Connecting button disabled\n            await _makeSigner();//current account signature\n            await _getAccount();//current account address\n            await _makeContract(TAddress,TokenABI.abi,tokenContract);// Token Contract Instance\n            await _makeContract(AMujinAddress,AMujinABI.abi,aizuMujinContract);// AizuMujin Contract Instance\n            await _getBalanceOf(currentAccount,\"myTotalToken\"); //get balance from MY wallet\n            await _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");// get balance from AIZUMUJIN contract\n        }catch(error){\n            //activateFunc(true);//Connecting button disabled\n        }\n    }\n\n    async function _connectWallet()\n    {\n        //check whether Metamask is installed\n        if (window.ethereum === undefined) {\n            console.log(\"ERROR: MetaMask not installed; using read-only defaults\");\n        } else {\n            console.log(\"OK: Metamask exists.\");\n            // get Metamask Provider\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            try{\n                await provider.send(\"eth_requestAccounts\", []);\n            }catch(error){\n                alert(\"Connecting canceled or Error occured\")\n            }\n            console.log(provider);\n        }\n    }\n    //to trnsact to blockchain, if you want to know about siner, please go to the Official Documentation\n    async function _makeSigner()\n    {\n        signer = await provider.getSigner();\n        console.log(\"Signer: \" + signer);\n    }\n\n    //e.g.) _makeContract(the address of which you wan to get functions,\n    //                    the abi related to the address,\n    //                    the provider you use or where the contract is in\n    //                  );\n    function _makeContract(_address,_abi,obj)\n    {\n        obj.contract = new ethers.Contract(_address, _abi, provider);\n        console.log(obj.checkCode + \": \" +obj.contract.symbol());\n    }\n\n    //To get the balance of AMT\n    //e.g.) _getBalanceOf(address which has AMT, the HTML ID which you want to insert the result into)\n    async function _getBalanceOf(_address,_elementId){\n        const balanceHex = await tokenContract.contract.balanceOf(_address); //get balance as hexidecimal\n        balance = ethers.BigNumber.from(balanceHex).toNumber();//to decimal\n        console.log(ethers.BigNumber.from(balance).toNumber());\n        document.getElementById(_elementId).innerHTML = balance;\n    }\n\n\n    async function _sendTokenToAizuMujin(setToggle){\n        let amount = document.getElementById(\"transactionInpt\").value;\n        if(!isNaN(amount)){\n            try{\n                let transaction = await tokenContract.contract.connect(signer).transfer(AMujinAddress,Number(amount));\n                setToggle(true);//send button disabled\n                await transaction.wait();\n                setToggle(false);// send button disabled\n                //activateSendTokenFunctions(true);\n                await _getBalanceOf(currentAccount,\"myTotalToken\"); //get balance from MY wallet\n                await _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");// get balance from AIZUMUJIN contract\n            }catch(error){\n                alert(\"ERROR: Canceled or Failed\");\n            }\n        }else{\n            alert(\"ERROR: Failed to pay.\");\n        }\n\n    }\n\n    async function _getAccount() {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n        .catch((err) => {\n            if (err.code === 4001) {\n                // EIP-1193 userRejectedRequest error\n                // If this happens, the user rejected the connection request.\n                console.log('Please connect to MetaMask.');\n            } else {\n                console.error(err);\n            }\n        });\n        currentAccount = accounts[0];\n        console.log(\"ACCOUNT: \" + currentAccount);\n    }\n\n    //After the connection to this page, connectBtn must be inactivated.\n    function activateFunc(_activate)\n    {\n        if(provider != null && _activate===false)\n        {\n            document.getElementById('connectBtn').innerHTML =\"ウォレット接続済み\";\n            document.getElementById('connectBtn').setAttribute(\"disabled\", true);\n        }else if(_activate===true){\n            document.getElementById('connectBtn').innerHTML =\"ウォレットに接続する\";\n            document.getElementById('connectBtn').setAttribute(\"disabled\", false);\n        }\n    }\n\n    //Aizumujin Contract function\n    //send all token into the person of the address in input box\n    async function _transferAllToken(setToggle2)\n    {\n        //get Address from html form\n        const _toAddress = document.getElementById(\"aizuMujinInpt\").value;\n        console.log(_toAddress);\n        if(!isNaN(_toAddress)){\n            //when the inputbox has a value to get\n            try{\n                let transaction = await aizuMujinContract.contract.connect(signer).sendAllTokens(_toAddress);\n                setToggle2(true);\n                await transaction.wait();\n                setToggle2(false);\n            }catch(error){\n                alert(\"ERROR: Canceled or Failed\");\n            }\n        }else{\n            //when the inputbox is Nothing to get\n            alert(\"ERROR: Failed to pay.\");\n        }\n        await _connectWallet();\n        await _makeSigner();//current account signature\n        await _getAccount();//current account address\n        await _makeContract(TAddress,TokenABI.abi,tokenContract);// Token Contract Instance\n        await _makeContract(AMujinAddress,AMujinABI.abi,aizuMujinContract);// AizuMujin Contract Instance\n        await _getBalanceOf(currentAccount,\"myTotalToken\"); //get balance from MY wallet\n        await _getBalanceOf(AMujinAddress,\"AizuMujinTotalToken\");// get balance from AIZUMUJIN contract\n    }\n\n"],"mappings":"0YAAA,OAAQA,QAAQ,KAAO,OAAO,CAC9B;AACA,OAASC,MAAM,KAAQ,QAAQ,CAE/B;AACA,MAAO,CAAAC,QAAQ,KAAM,kCAAkC,CACvD,MAAO,CAAAC,SAAS,KAAM,6BAA6B,CAEnD;AACA,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,UAAU,KAAM,cAAc,CAErC;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBACA,GAAI,CAAAC,QAAQ,CAAG,4CAA4C,CAC3D;AACA,GAAI,CAAAC,aAAa,CAAG,4CAA4C,CAEhE;AACA;AACA;AACA,GAAI,CAAAC,aAAa,CAAG,CAACC,QAAQ,CAAC,IAAI,CAACC,SAAS,CAAC,gBAAgB,CAAC,CAC9D,GAAI,CAAAC,iBAAiB,CAAE,CAACF,QAAQ,CAAC,IAAI,CAACC,SAAS,CAAC,qBAAqB,CAAC,CAEtE;AACA,GAAI,CAAAE,cAAc,CAAE;AACpB,GAAI,CAAAC,QAAQ,CAAG,IAAI,CAAE;AACrB,GAAI,CAAAC,MAAM,CAAG,IAAI,CAAG;AACpB,GAAI,CAAAC,OAAO,CAAG,CAAC,CAAE;AACjB,cAAe,SAAS,CAAAC,IAAIA,CAAA,CAAG,CAC3B,IAAAC,SAAA,CAA2BxB,QAAQ,CAAC,KAAK,CAAC,CAAAyB,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAnCG,MAAM,CAAAF,UAAA,IAACG,SAAS,CAAAH,UAAA,IAAoB;AAC3C,IAAAI,UAAA,CAA6B7B,QAAQ,CAAC,KAAK,CAAC,CAAA8B,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAArCE,OAAO,CAAAD,UAAA,IAACE,UAAU,CAAAF,UAAA,IAAoB;AAC7C,mBACIpB,KAAA,CAAAE,SAAA,EAAAqB,QAAA,eACAzB,IAAA,OAAAyB,QAAA,CAAI,0BAAI,CAAI,CAAC,cACbzB,IAAA,QAAK,CAAC,2KACsB,cAAAA,IAAA,QAAK,CAAC,cAClCA,IAAA,QAAK,CAAC,cAAAA,IAAA,QAAK,CAAC,cAEZA,IAAA,WAAQ0B,EAAE,CAAC,YAAY,CAACC,OAAO,CAAEC,oBAAqB,CAAAH,QAAA,CAAC,8DAAU,CAAQ,CAAC,cAE1EzB,IAAA,QAAI,CAAC,cAAAA,IAAA,QAAI,CAAC,cAAAA,IAAA,QAAI,CAAC,cAAAA,IAAA,QAAI,CAAC,cACpBA,IAAA,CAACJ,YAAY,EAACiC,qBAAqB,CAAE,SAAAA,sBAAA,CAAI,CAACA,sBAAqB,CAACT,SAAS,CAAC,EAAE,CAACD,MAAM,CAAEA,MAAO,CAAE,CAAC,cAE/FnB,IAAA,CAACH,SAAS,GAAE,CAAC,cAEbG,IAAA,CAACF,UAAU,EAACgC,iBAAiB,CAAE,SAAAA,kBAAA,CAAI,CAACA,kBAAiB,CAACN,UAAU,CAAC,EAAE,CAACD,OAAO,CAAEA,OAAQ,CAAE,CAAC,cACxFvB,IAAA,QAAK,CAAC,cACNE,KAAA,QAAAuB,QAAA,eACAzB,IAAA,QAAK,CAAC,cACNA,IAAA,OAAAyB,QAAA,CAAI,oEAAW,CAAI,CAAC,cACpBvB,KAAA,MAAAuB,QAAA,EAAG,0KACyB,cAAAzB,IAAA,QAAK,CAAC,6NACS,cAAAA,IAAA,QAAK,CAAC,mJACzB,cAAAA,IAAA,QAAK,CAAC,6KACK,cAAAA,IAAA,QAAK,CAAC,qEAC9B,cAAAA,IAAA,QAAK,CAAC,cACjBA,IAAA,QAAK,CAAC,gBACO,cAAAA,IAAA,QAAK,CAAC,EAChB,CAAC,cACJA,IAAA,QAAK,CAAC,EACD,CAAC,EACJ,CAAC,CAEP,CAAC,QAEc,CAAA4B,oBAAoBA,CAAA,SAAAG,qBAAA,CAAAC,KAAA,MAAAC,SAAA,YAAAF,sBAAA,EAAAA,qBAAA,CAAAG,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAnC,SAAAC,QAAA,SAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA,SAGc,CAAAC,cAAc,CAAC,CAAC,QACtBC,YAAY,CAAC,KAAK,CAAC,CAAC;AAAAJ,QAAA,CAAAE,IAAA,SACd,CAAAG,WAAW,CAAC,CAAC,QAAAL,QAAA,CAAAE,IAAA,SACb,CAAAI,WAAW,CAAC,CAAC,QAAAN,QAAA,CAAAE,IAAA,UACb,CAAAK,aAAa,CAAC1C,QAAQ,CAACX,QAAQ,CAACsD,GAAG,CAACzC,aAAa,CAAC,SAAAiC,QAAA,CAAAE,IAAA,UAClD,CAAAK,aAAa,CAACzC,aAAa,CAACX,SAAS,CAACqD,GAAG,CAACtC,iBAAiB,CAAC,SAAA8B,QAAA,CAAAE,IAAA,UAC5D,CAAAO,aAAa,CAACtC,cAAc,CAAC,cAAc,CAAC,SAAA6B,QAAA,CAAAE,IAAA,UAC5C,CAAAO,aAAa,CAAC3C,aAAa,CAAC,qBAAqB,CAAC,SAAAkC,QAAA,CAAAE,IAAA,kBAAAF,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAU,EAAA,CAAAV,QAAA,sCAAAA,QAAA,CAAAW,IAAA,MAAAd,OAAA,iBAI/D,UAAAN,qBAAA,CAAAC,KAAA,MAAAC,SAAA,WAEc,CAAAU,cAAcA,CAAA,SAAAS,eAAA,CAAApB,KAAA,MAAAC,SAAA,GAiB7B;AAAA,SAAAmB,gBAAA,EAAAA,eAAA,CAAAlB,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAjBA,SAAAiB,SAAA,SAAAlB,mBAAA,GAAAG,IAAA,UAAAgB,UAAAC,SAAA,iBAAAA,SAAA,CAAAd,IAAA,CAAAc,SAAA,CAAAb,IAAA,cAGQc,MAAM,CAACC,QAAQ,GAAKC,SAAS,GAAAH,SAAA,CAAAb,IAAA,UAC7BiB,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC,CAACL,SAAA,CAAAb,IAAA,iBAEvEiB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACnC;AACAhD,QAAQ,CAAG,GAAI,CAAAnB,MAAM,CAACoE,SAAS,CAACC,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC,CAACF,SAAA,CAAAd,IAAA,GAAAc,SAAA,CAAAb,IAAA,SAEpD,CAAA9B,QAAQ,CAACmD,IAAI,CAAC,qBAAqB,CAAE,EAAE,CAAC,QAAAR,SAAA,CAAAb,IAAA,kBAAAa,SAAA,CAAAd,IAAA,IAAAc,SAAA,CAAAL,EAAA,CAAAK,SAAA,aAE9CS,KAAK,CAAC,sCAAsC,CAAC,SAEjDL,OAAO,CAACC,GAAG,CAAChD,QAAQ,CAAC,CAAC,yBAAA2C,SAAA,CAAAJ,IAAA,MAAAE,QAAA,iBAE7B,UAAAD,eAAA,CAAApB,KAAA,MAAAC,SAAA,WAEc,CAAAY,WAAWA,CAAA,SAAAoB,YAAA,CAAAjC,KAAA,MAAAC,SAAA,GAM1B;AACA;AACA;AACA;AAAA,SAAAgC,aAAA,EAAAA,YAAA,CAAA/B,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CATA,SAAA8B,SAAA,SAAA/B,mBAAA,GAAAG,IAAA,UAAA6B,UAAAC,SAAA,iBAAAA,SAAA,CAAA3B,IAAA,CAAA2B,SAAA,CAAA1B,IAAA,SAAA0B,SAAA,CAAA1B,IAAA,SAEmB,CAAA9B,QAAQ,CAACyD,SAAS,CAAC,CAAC,QAAnCxD,MAAM,CAAAuD,SAAA,CAAAE,IAAA,CACNX,OAAO,CAACC,GAAG,CAAC,UAAU,CAAG/C,MAAM,CAAC,CAAC,wBAAAuD,SAAA,CAAAjB,IAAA,MAAAe,QAAA,GACpC,UAAAD,YAAA,CAAAjC,KAAA,MAAAC,SAAA,GAMD,QAAS,CAAAc,aAAaA,CAACwB,QAAQ,CAACC,IAAI,CAACC,GAAG,CACxC,CACIA,GAAG,CAACjE,QAAQ,CAAG,GAAI,CAAAf,MAAM,CAACiF,QAAQ,CAACH,QAAQ,CAAEC,IAAI,CAAE5D,QAAQ,CAAC,CAC5D+C,OAAO,CAACC,GAAG,CAACa,GAAG,CAAChE,SAAS,CAAG,IAAI,CAAEgE,GAAG,CAACjE,QAAQ,CAACmE,MAAM,CAAC,CAAC,CAAC,CAC5D,CAEA;AACA;AAAA,QACe,CAAA1B,aAAaA,CAAA2B,EAAA,CAAAC,GAAA,SAAAC,cAAA,CAAA9C,KAAA,MAAAC,SAAA,YAAA6C,eAAA,EAAAA,cAAA,CAAA5C,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAA5B,SAAA2C,SAA6BR,QAAQ,CAACS,UAAU,MAAAC,UAAA,QAAA9C,mBAAA,GAAAG,IAAA,UAAA4C,UAAAC,SAAA,iBAAAA,SAAA,CAAA1C,IAAA,CAAA0C,SAAA,CAAAzC,IAAA,SAAAyC,SAAA,CAAAzC,IAAA,SACnB,CAAAnC,aAAa,CAACC,QAAQ,CAAC4E,SAAS,CAACb,QAAQ,CAAC,QAA7DU,UAAU,CAAAE,SAAA,CAAAb,IAAA,CAAqD;AACrExD,OAAO,CAAGrB,MAAM,CAAC4F,SAAS,CAACC,IAAI,CAACL,UAAU,CAAC,CAACM,QAAQ,CAAC,CAAC,CAAC;AACvD5B,OAAO,CAACC,GAAG,CAACnE,MAAM,CAAC4F,SAAS,CAACC,IAAI,CAACxE,OAAO,CAAC,CAACyE,QAAQ,CAAC,CAAC,CAAC,CACtDC,QAAQ,CAACC,cAAc,CAACT,UAAU,CAAC,CAACU,SAAS,CAAG5E,OAAO,CAAC,wBAAAqE,SAAA,CAAAhC,IAAA,MAAA4B,QAAA,GAC3D,UAAAD,cAAA,CAAA9C,KAAA,MAAAC,SAAA,WAGc,CAAAJ,sBAAqBA,CAAA8D,GAAA,SAAAC,sBAAA,CAAA5D,KAAA,MAAAC,SAAA,YAAA2D,uBAAA,EAAAA,sBAAA,CAAA1D,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAApC,SAAAyD,SAAqCzE,SAAS,MAAA0E,MAAA,CAAAC,WAAA,QAAA5D,mBAAA,GAAAG,IAAA,UAAA0D,UAAAC,SAAA,iBAAAA,SAAA,CAAAxD,IAAA,CAAAwD,SAAA,CAAAvD,IAAA,SACtCoD,MAAM,CAAGN,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC,CAACS,KAAK,IACzDC,KAAK,CAACL,MAAM,CAAC,EAAAG,SAAA,CAAAvD,IAAA,WAAAuD,SAAA,CAAAxD,IAAA,GAAAwD,SAAA,CAAAvD,IAAA,SAEe,CAAAnC,aAAa,CAACC,QAAQ,CAAC4F,OAAO,CAACvF,MAAM,CAAC,CAACwF,QAAQ,CAAC/F,aAAa,CAACgG,MAAM,CAACR,MAAM,CAAC,CAAC,QAAjGC,WAAW,CAAAE,SAAA,CAAA3B,IAAA,CACflD,SAAS,CAAC,IAAI,CAAC,CAAC;AAAA6E,SAAA,CAAAvD,IAAA,SACV,CAAAqD,WAAW,CAACQ,IAAI,CAAC,CAAC,QACxBnF,SAAS,CAAC,KAAK,CAAC,CAAC;AACjB;AAAA6E,SAAA,CAAAvD,IAAA,UACM,CAAAO,aAAa,CAACtC,cAAc,CAAC,cAAc,CAAC,SAAAsF,SAAA,CAAAvD,IAAA,UAC5C,CAAAO,aAAa,CAAC3C,aAAa,CAAC,qBAAqB,CAAC,SAAA2F,SAAA,CAAAvD,IAAA,kBAAAuD,SAAA,CAAAxD,IAAA,IAAAwD,SAAA,CAAA/C,EAAA,CAAA+C,SAAA,aAExDjC,KAAK,CAAC,2BAA2B,CAAC,CAAC,QAAAiC,SAAA,CAAAvD,IAAA,kBAGvCsB,KAAK,CAAC,uBAAuB,CAAC,CAAC,yBAAAiC,SAAA,CAAA9C,IAAA,MAAA0C,QAAA,iBAGtC,UAAAD,sBAAA,CAAA5D,KAAA,MAAAC,SAAA,WAEc,CAAAa,WAAWA,CAAA,SAAA0D,YAAA,CAAAxE,KAAA,MAAAC,SAAA,GAe1B;AAAA,SAAAuE,aAAA,EAAAA,YAAA,CAAAtE,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAfA,SAAAqE,SAAA,MAAAC,QAAA,QAAAvE,mBAAA,GAAAG,IAAA,UAAAqE,UAAAC,SAAA,iBAAAA,SAAA,CAAAnE,IAAA,CAAAmE,SAAA,CAAAlE,IAAA,SAAAkE,SAAA,CAAAlE,IAAA,SAC2B,CAAAc,MAAM,CAACC,QAAQ,CAACoD,OAAO,CAAC,CAAEC,MAAM,CAAE,qBAAsB,CAAC,CAAC,CAChFC,KAAK,CAAC,SAACC,GAAG,CAAK,CACZ,GAAIA,GAAG,CAACC,IAAI,GAAK,IAAI,CAAE,CACnB;AACA;AACAtD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC9C,CAAC,IAAM,CACHD,OAAO,CAACuD,KAAK,CAACF,GAAG,CAAC,CACtB,CACJ,CAAC,CAAC,QATIN,QAAQ,CAAAE,SAAA,CAAAtC,IAAA,CAUd3D,cAAc,CAAG+F,QAAQ,CAAC,CAAC,CAAC,CAC5B/C,OAAO,CAACC,GAAG,CAAC,WAAW,CAAGjD,cAAc,CAAC,CAAC,wBAAAiG,SAAA,CAAAzD,IAAA,MAAAsD,QAAA,GAC7C,UAAAD,YAAA,CAAAxE,KAAA,MAAAC,SAAA,GAGD,QAAS,CAAAW,YAAYA,CAACuE,SAAS,CAC/B,CACI,GAAGvG,QAAQ,EAAI,IAAI,EAAIuG,SAAS,GAAG,KAAK,CACxC,CACI3B,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,SAAS,CAAE,WAAW,CAC5DF,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAAC2B,YAAY,CAAC,UAAU,CAAE,IAAI,CAAC,CACxE,CAAC,IAAK,IAAGD,SAAS,GAAG,IAAI,CAAC,CACtB3B,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,SAAS,CAAE,YAAY,CAC7DF,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAAC2B,YAAY,CAAC,UAAU,CAAE,KAAK,CAAC,CACzE,CACJ,CAEA;AACA;AAAA,QACe,CAAAtF,kBAAiBA,CAAAuF,GAAA,SAAAC,kBAAA,CAAAtF,KAAA,MAAAC,SAAA,YAAAqF,mBAAA,EAAAA,kBAAA,CAAApF,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAhC,SAAAmF,SAAiC/F,UAAU,MAAAgG,UAAA,CAAAzB,WAAA,QAAA5D,mBAAA,GAAAG,IAAA,UAAAmF,UAAAC,SAAA,iBAAAA,SAAA,CAAAjF,IAAA,CAAAiF,SAAA,CAAAhF,IAAA,SAEvC;AACM8E,UAAU,CAAGhC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACS,KAAK,CACjEvC,OAAO,CAACC,GAAG,CAAC4D,UAAU,CAAC,CAAC,GACpBrB,KAAK,CAACqB,UAAU,CAAC,EAAAE,SAAA,CAAAhF,IAAA,WAAAgF,SAAA,CAAAjF,IAAA,GAAAiF,SAAA,CAAAhF,IAAA,SAGW,CAAAhC,iBAAiB,CAACF,QAAQ,CAAC4F,OAAO,CAACvF,MAAM,CAAC,CAAC8G,aAAa,CAACH,UAAU,CAAC,QAAxFzB,WAAW,CAAA2B,SAAA,CAAApD,IAAA,CACf9C,UAAU,CAAC,IAAI,CAAC,CAACkG,SAAA,CAAAhF,IAAA,UACX,CAAAqD,WAAW,CAACQ,IAAI,CAAC,CAAC,SACxB/E,UAAU,CAAC,KAAK,CAAC,CAACkG,SAAA,CAAAhF,IAAA,kBAAAgF,SAAA,CAAAjF,IAAA,IAAAiF,SAAA,CAAAxE,EAAA,CAAAwE,SAAA,aAElB1D,KAAK,CAAC,2BAA2B,CAAC,CAAC,QAAA0D,SAAA,CAAAhF,IAAA,kBAGvC;AACAsB,KAAK,CAAC,uBAAuB,CAAC,CAAC,QAAA0D,SAAA,CAAAhF,IAAA,UAE7B,CAAAC,cAAc,CAAC,CAAC,SAAA+E,SAAA,CAAAhF,IAAA,UAChB,CAAAG,WAAW,CAAC,CAAC,SAAA6E,SAAA,CAAAhF,IAAA,UACb,CAAAI,WAAW,CAAC,CAAC,SAAA4E,SAAA,CAAAhF,IAAA,UACb,CAAAK,aAAa,CAAC1C,QAAQ,CAACX,QAAQ,CAACsD,GAAG,CAACzC,aAAa,CAAC,SAAAmH,SAAA,CAAAhF,IAAA,UAClD,CAAAK,aAAa,CAACzC,aAAa,CAACX,SAAS,CAACqD,GAAG,CAACtC,iBAAiB,CAAC,SAAAgH,SAAA,CAAAhF,IAAA,UAC5D,CAAAO,aAAa,CAACtC,cAAc,CAAC,cAAc,CAAC,SAAA+G,SAAA,CAAAhF,IAAA,UAC5C,CAAAO,aAAa,CAAC3C,aAAa,CAAC,qBAAqB,CAAC,0BAAAoH,SAAA,CAAAvE,IAAA,MAAAoE,QAAA,iBAC3D,UAAAD,kBAAA,CAAAtF,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}